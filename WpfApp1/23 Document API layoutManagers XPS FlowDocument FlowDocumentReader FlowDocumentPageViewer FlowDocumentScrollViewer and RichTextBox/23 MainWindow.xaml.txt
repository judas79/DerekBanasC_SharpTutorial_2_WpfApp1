<!--************ MainWindow.xaml **************-->
<!-- x:Class defines what code handles events -->
<!-- You can define the title, size, whether it can resize,
    Whether it automatically resizes for content, whether
    it stays on top, whether it starts minimized or maximized,
    and an icon
    below is the namespace and the height and width of our window-->
<Window x:Class="WpfApp1.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:WpfApp1"
        xmlns:sys="clr-namespace:System;assembly=mscorlib"
        mc:Ignorable="d"
        Title="WPF Tutorial" Height="350" Width="525" ResizeMode="CanResize" SizeToContent="WidthAndHeight" Topmost="False" WindowState="Normal"
        Icon="./Resources/RobotRods16.ico" MouseMove="Window_MouseMove">

    <!-- You can store data as a resource and reuse it by adding this
    xmlns:sys="clr-namespace:System;assembly=mscorlib" -->
    <Window.Resources>
        <sys:String x:Key="strHelloAgain">Hello Again</sys:String>

        <!-- You can define default styling of
        components -->
        <Style TargetType="Button">
            <Setter Property="Margin" Value="1"/>
            <Setter Property="FontSize" Value="20"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="FontFamily" Value="Consolas"/>
        </Style>
    </Window.Resources>
    <Grid>

        <!-- Calendar Lesson  You can add more tabs by right clicking
        the top of the tabs and select Add Tab -->

        <!-- Drag in TabControl, to top left, pull tabItems into place, side by side
        rename tabItem to Calendar, right click , in the tab area, and add TabItem, click on 2nd tab item
        and rename to Draw.  Highliight Calendar Tab and drag in Calendar from ToolBox, and adjust.  
        Drag in a textBox, close off Calendar with a </Calendar>-->
        <TabControl HorizontalAlignment="Left" Width="650" Height="Auto"  Margin="-4,0,0,0" VerticalAlignment="Top" MinHeight="319" MinWidth="521" >
            <TabItem Header="Calendar">
                <Grid Background="#FFE5E5E5">
                    <!---Give the Calendar a name, add Background color, DislayMode month year or decade,
                     add a DisplayDateStart and end DisplayDateEnd, define first day of the week, 
                    define if current day is highlighted, define another selected date changed to be highlighted as an event handler -->
                    <Calendar Name="MyCalendar" HorizontalAlignment="Left" Margin="10,12,0,0" VerticalAlignment="Top" RenderTransformOrigin="-0.237,0.479"
                              Background="AliceBlue" DisplayMode="Month" DisplayDateStart="1/1/2021" DisplayDateEnd="1/31/2021" FirstDayOfWeek="Monday"
                              IsTodayHighlighted="True" SelectedDatesChanged="MyCalendar_SelectedDatesChanged" >

                        <!-- x-out certain dates-->
                        <Calendar.BlackoutDates>
                            <CalendarDateRange Start="1/2/2021" End="1/3/2021"></CalendarDateRange>
                        </Calendar.BlackoutDates>
                        <!--Reference SelectedDatesChanged to add the dates-->
                        <Calendar.SelectedDates>
                            <sys:DateTime>1/25/2021</sys:DateTime>
                        </Calendar.SelectedDates>
                    </Calendar>
                    <!-- give the textbox a name-->
                    <TextBox Name="tbDateSelected" HorizontalAlignment="Left" Height="23" Margin="200,44,0,0" TextWrapping="Wrap" Text="TextBox" VerticalAlignment="Top" Width="120"/>

                </Grid>
            </TabItem>


            <!-- Draw Lesson KeyUp catches any key presses -->
            <TabItem Header="Draw" KeyUp="DrawPanel_KeyUp" >
                <!--We will change this from a <GridPanel Background="#FFE5E5E5"/> to a <StackPanel.../> 
                Click on the Document Outline Tab, find [TabItem] Draw and expand it to find 'GridP' 
                and right click on it and choose change layout type and choose 'StackPanel'  -->
                <StackPanel Background="#FFE5E5E5" RenderTransformOrigin="0.513,0.986">
                    <!--- Give the toolbar a Name and set Height, next highlight the toolbar then go into properties box and in 
                    Commom ->'Items' click the button next to (collections) 
                    and add 3 radio buttonsfor Common -> Content name them Draw,
                    Erase, and Select Set border brush RGB
                    to 210 each and change width to 80 and height
                    to 50 
                    Select all buttons with Shift and then change
                    the GroupName in properties to DrawGroup 
                    Tools -> 'choose Toolbox items' -> Choose-> WPF Items ->
                    put a check next to InkCanvas 
                    Drag an InkCanvas on your tab 
                    Add the same click event name to radio buttons:
                    DrawButton_Click, buttons get there own Click names: Click="SaveButton_Click", Click="OpenButton_Click"
                    drag inkCanvas in from toolBox and drag to edges-->
                    <ToolBar Name="DrawingToolbar" Height="50">
                        <RadioButton Background="#FFDEDEDE" Content="Draw" Click="DrawButton_Click" Height="50" Width="80" GroupName="DrawGroup"/>
                        <RadioButton Background="#FFDEDEDE" Content="Erase" Click="DrawButton_Click" Height="50" Width="80" GroupName="DrawGroup"/>
                        <RadioButton Background="#FFDEDEDE" Content="Select" Click="DrawButton_Click" Height="50" Width="80" GroupName="DrawGroup"/>
                        <Button Background="#FFDEDEDE" Content="Save" Height="50" Width="80" Click="SaveButton_Click"/>
                        <Button Background="#FFDEDEDE" Content="Open" Height="50" Width="80" Click="OpenButton_Click"/>
                    </ToolBar>
                    <!--give ink canvas a name-->
                    <InkCanvas Name="DrawingCanvas" Height="244">
                        <!-- define default attributes for InkCanvas -->
                        <InkCanvas.DefaultDrawingAttributes>
                            <DrawingAttributes x:Name="strokeAttr" Width="3" Height="3"
                                               Color="Black"/>
                        </InkCanvas.DefaultDrawingAttributes>
                    </InkCanvas>
                </StackPanel>
            </TabItem>

            <!-- Tutorial 23 starts here
            
            We'll use the Document API layout managers to
            work with formatted documents using the XML
            Paper Specification (XPS) -->

            <!-- Different layout managers:
            
            FlowDocumentReader : Read only, with zoom, search
            RichTextBox : Displays editable data in a FlowDocument
            FlowDocumentPageViewer : Shows pages, but no zoom or search-->

            <!-- change TabItem to new header name -->
            <TabItem Header="Flow Reader" HorizontalAlignment="Left" Height="20" VerticalAlignment="Top" Width="76">
                <Grid Background="#FFE5E5E5">

                    <!-- enable many default attributes -->
                    <FlowDocumentReader ViewingMode="Page"
                                    IsFindEnabled="True" IsPageViewEnabled="True"
                                    IsScrollViewEnabled="True" IsTwoPageViewEnabled="True" >

                        <FlowDocument>
                            <Paragraph>
                                In this part of my C# tutorial I will be covering the Document API. We'll use the Document API layout managers to work with formatted documents using the XML Paper Specification (XPS).                                
                                I'll show how to use the FlowDocument, FlowDocumentReader, FlowDocumentPageViewer, FlowDocumentScrollViewer and RichTextBox.  For best results take notes on the cheat sheet provided above as you watch and leave any questions you have.
                            </Paragraph>
                            <!-- define a list with all your list items-->
                            <List>
                                <ListItem>
                                    <Paragraph>Item 1</Paragraph>
                                </ListItem>
                                <ListItem>
                                    <Paragraph>Item 2</Paragraph>
                                </ListItem>
                                <ListItem>
                                    <Paragraph>Item 3</Paragraph>
                                </ListItem>
                            </List>

                            <!-- add an image, label, comboboxes and things like that, horrizontaly in a stackpanel -->
                            <BlockUIContainer>
                                <StackPanel>
                                    <Image Source=".\Resources\RobotRods16.ico" Height="54"/>
                                    <Label Foreground="Blue">Favorite :</Label>
                                    <ComboBox>
                                        <ComboBoxItem IsSelected="True">Android</ComboBoxItem>
                                        <ComboBoxItem >Apple</ComboBoxItem>
                                        <ComboBoxItem >Google</ComboBoxItem>
                                    </ComboBox>
                                    <Label Foreground="Red">Favorite Color:</Label>
                                    <!-- Create radio buttons in another StackPanel -->
                                    <StackPanel>
                                        <RadioButton>Red</RadioButton>
                                        <RadioButton>Blue</RadioButton>
                                        <RadioButton>Green</RadioButton>
                                    </StackPanel>

                                    <!-- ask for Name, input in TextBox-->
                                    <Label>Your Name :</Label>
                                    <TextBox>Name</TextBox>
                                </StackPanel>
                            </BlockUIContainer>

                            <!-- Throw in an empty line -->
                            <Paragraph></Paragraph>

                            <!-- Create table, Table.Columns, and define, 1 <TableColumn/> for each column, 
                            and TableRowGroup for <TableRow> rows defning TableCell spanning amount of rows -->
                            <Table>
                                <Table.Columns>
                                    <TableColumn/>
                                    <TableColumn/>
                                    <TableColumn/>
                                </Table.Columns>
                                <TableRowGroup>
                                    <TableRow>
                                        <TableCell ColumnSpan="3" Background="Blue">
                                            <Paragraph Padding="10" Foreground="White" >Best Baseball Players</Paragraph>
                                        </TableCell>
                                    </TableRow>
                                    <TableRow>
                                        <TableCell Background="White">
                                            <Paragraph>Name</Paragraph>
                                        </TableCell>
                                        <TableCell Background="White">
                                            <Paragraph>Average</Paragraph>
                                        </TableCell>
                                        <TableCell Background="White">
                                            <Paragraph>HRs</Paragraph>
                                        </TableCell>
                                    </TableRow>
                                </TableRowGroup>
                            </Table>
                        </FlowDocument>
                    </FlowDocumentReader>
                </Grid>

                <!-- close off Grid,
                
                Page Viewer,striped down version of the Flow Document Reader, no search option etc.
                add TabItem next to existing tabs, create <Grid></Grid> -->
            </TabItem>
            <TabItem Header="Page Viewer" HorizontalAlignment="Left" Height="20" VerticalAlignment="Top" Width="76">
                <StackPanel Background="#FFE5E5E5">
                    <!--Create FlowDocumentPageViewer create and specify name and height
                    Create a FlowDocument to hold everything(text), -->
                    <FlowDocumentPageViewer Name="FdPageViewer" Height="290">
                        <FlowDocument>
                            <Paragraph>
                                In this part of my C# tutorial I will be covering the Document API. We'll use the Document API layout managers to work with formatted documents using the XML Paper Specification (XPS).

I'll show how to use the FlowDocument, FlowDocumentReader, FlowDocumentPageViewer, FlowDocumentScrollViewer and RichTextBox.
For best results take notes on the cheat sheet provided above as you watch and leave any questions you have.
                            </Paragraph>
                        </FlowDocument>
                    </FlowDocumentPageViewer>
                </StackPanel>
            </TabItem>

            <!-- Flow Document Scroll Reader, only option is a scroll bar-->
            <TabItem Header="Scroll" HorizontalAlignment="Left" Height="20" VerticalAlignment="Top" Width="54">
                <Grid Background="#FFE5E5E5">
                    <FlowDocumentScrollViewer>
                        <FlowDocument>
                            <Paragraph>
                                In this part of my C# tutorial I will be covering the Document API. We'll use the Document API layout managers to work with formatted documents using the XML Paper Specification (XPS).

I'll show how to use the FlowDocument, FlowDocumentReader, FlowDocumentPageViewer, FlowDocumentScrollViewer and RichTextBox.
For best results take notes on the cheat sheet provided above as you watch and leave any questions you have.
                            </Paragraph>
                            <Paragraph>
                                Thank you to Patreon supporters like the following for helping me make this video
                            </Paragraph>
                        </FlowDocument>
                    </FlowDocumentScrollViewer>
                </Grid>
            </TabItem>

            <!-- Generate using FlowDocumentScrollViewer
            Give it a name so we can dynamicaly load this, from our cs page-->
            <TabItem Header="Generate" HorizontalAlignment="Left" Height="20" VerticalAlignment="Top" Width="64">
                <Grid Background="#FFE5E5E5">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="98*"/>
                        <ColumnDefinition Width="31*"/>
                    </Grid.ColumnDefinitions>

                    <FlowDocumentScrollViewer Name="fdScrollViewer" Grid.ColumnSpan="2" />
                </Grid>
            </TabItem>

            <!-- Rich Text you can add soo many things toolbars, full text editor
            we will make a context menu with cut, copy, paste controls, that calls our cs-->
            <TabItem Header="Rich Text" HorizontalAlignment="Left" Height="20" VerticalAlignment="Top" Width="64">
                <StackPanel>
                    <RichTextBox Name="RichTB" Height="200"
                                 SpellCheck.IsEnabled="True" ContextMenuOpening="RichTB_ContextMenuOpening">
                        <!--the editing will be done in a flowDocument-->
                        <FlowDocument>
                            <Paragraph>Edit Me</Paragraph>
                        </FlowDocument>
                    </RichTextBox>
                    <!-- buttons created here, to save and open documents, click events call cs-->
                    <Button Click="SaveRTBContent">Save</Button>
                    <Button Click="OpenRTBContent">Open</Button>
                </StackPanel>
            </TabItem>

        </TabControl>
    </Grid>
</Window>
