/*
In this part of my C# video tutorial I show how to make a Paint App, and then we look at Drawing Lines, 
Ellipses, and Rectangles using Canvas. We’ll be using System.Windows.Shapes in this tutorial. 
They are great to work with because they respond to events just like other WPF components.
*/

using Microsoft.Win32;
using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Controls.Primitives;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;
using System.Windows.Ink;

// Windows Presentation Foundation (WPF)
// is used to create graphical user interfaces
// of a traditional format or within a
// browser (XAML Browser Based App / XBAP)

// Using XAML eXtensible Application Markup Language
// you can create the UI using XML
// XAML allows you to define buttons, boxes,
// animations, 2d / 3d graphics and more

// Create a New Project -> Visual C# -> Windows
// Classic Desktop -> WPF App

namespace WpfApp1
{
    /// <summary>
    /// Interaction logic for MainWindow.xaml
    /// </summary>
    
    // For generating a limited number of 2D
    // vector images you can use 
    // System.Windows.Shapes
    // Shapes created this way respond to
    // events like other WPF components

    public partial class MainWindow : Window
    {
        // tutorial 24
        // Define enum for all 3 shapes
        private enum MyShape
        {
            Line, Ellipse, Rectangle
        }

        // T24 Define the current shape used, default value Line
        private MyShape currShape = MyShape.Line;


        public MainWindow()
        {
            // L19 Initializes and displays the window
            InitializeComponent();

            // L19 You can set window properties in code
            this.Title = "Mouse Position";
            this.WindowStartupLocation = WindowStartupLocation.CenterScreen;
        
        }

        // ----------- Tutorial 19 starts here -----------
        //
        // This method was generated from the MainWindow.xaml after typing MouseMove= 
        // in the  MainWindow.xaml, we then click on the 'new event handler' popup to generate our method
        private void Window_MouseMove(object sender, MouseEventArgs e)
        {
            // when mouse moves, display x and y coordinates in the Title, 'this' is the mouse
            Title = "x / y : " + e.GetPosition(this).ToString();

        }

        // Tutorial 24

        private void LineButton_Click(object sender, RoutedEventArgs e)
        {
            currShape = MyShape.Line;
        }

        private void EllipseButton_Click(object sender, RoutedEventArgs e)
        {
            currShape = MyShape.Ellipse;
        }

        private void RectangleButton_Click(object sender, RoutedEventArgs e)
        {
            currShape = MyShape.Rectangle;
        }

        // define tracking: starting mouse click point and release click mouse ending point
        Point start;
        Point end;

        private void MyCanvas_MouseDown(object sender, MouseButtonEventArgs e)
        {
            // Get the X & Y of where mouse is 1st clicked, to start drawing the shape
            start = e.GetPosition(this);
        }

        private void MyCanvas_MouseUp(object sender, MouseButtonEventArgs e)
        {
            // Draw the correct shape, selected by the chosen radio button, 
            // the mouse is now up
            switch (currShape)
            {
                // if the line is chosen get the stored enum (MyShape) to verify that it is a line
                // Then call DrawLine();, to handle what to do
                case MyShape.Line:
                    DrawLine();
                    break;
                case MyShape.Ellipse:
                    DrawEllipse();
                    break;
                case MyShape.Rectangle:
                    DrawRectangle();
                    break;

                // none of the cases matched our enum contents
                default:
                    return;
            }
        }

        // handle where the coordinates of x/y by logging  the mouse coordinates when click is released
        private void MyCanvas_MouseMove(object sender, MouseEventArgs e)
        {
            // Update the X & Y as the  mouse moves, when left button is pressed
            if (e.LeftButton == MouseButtonState.Pressed)
            {
                end = e.GetPosition(this);
            }
        }

        // Sets and draws line after mouse is released
        private void DrawLine()
        {
            // create ne line
            Line newLine = new Line()
            {
                // the color of the brush, the starting position x/ y, the end coordinate position
                // the toolbat is 50 pixels high, so we have to subtract to adjust for that, for the canvas
                Stroke = Brushes.Blue,
                X1 = start.X,
                Y1 = start.Y - 50,
                X2 = end.X,
                Y2 = end.Y - 50
            };
            // draws the line (newLine) with all its informational data, on the canvas
            MyCanvas.Children.Add(newLine);
        }

        // Sets and draws ellipse after mouse is released
        private void DrawEllipse()
        {
            Ellipse newEllipse = new Ellipse()
            {
                Stroke = Brushes.Green,
                Fill = Brushes.Red,
                StrokeThickness = 4,
                Height = 10,
                Width = 10
            };

            // If the user the user tries to draw from
            // any direction then down and to the right
            // you'll get an error unless you use if
            // to change Left & TopProperty and Height
            // and Width accordingly

            if (end.X >= start.X)
            {
                // Defines the left part of the ellipse, 
                // this is the normal way to draw an ellipse (left to right)
                newEllipse.SetValue(Canvas.LeftProperty, start.X);
                // this calculates the width of the ellipse
                newEllipse.Width = end.X - start.X;
            }
            else
            {
                // this handles drawing the ellipse from (right to left)
                newEllipse.SetValue(Canvas.LeftProperty, end.X);
                newEllipse.Width = start.X - end.X;
            }

            // this handles the normal direction for the Y position,
            // drawing the line from top to bottom and accomidating for the toolbars 50 offset
            if (end.Y >= start.Y)
            {
                // Defines the top part of the ellipse
                newEllipse.SetValue(Canvas.TopProperty, start.Y - 50);
                newEllipse.Height = end.Y - start.Y;
            }
            else
            {
                // fors starting an ellipse from the bottom then going up
                newEllipse.SetValue(Canvas.TopProperty, end.Y - 50);
                newEllipse.Height = start.Y - end.Y;
            }
            // draws the actual ellipse
            MyCanvas.Children.Add(newEllipse);
        }

        // Sets and draws rectangle after mouse is released
        private void DrawRectangle()
        {
            Rectangle newRectangle = new Rectangle()
            {
                Stroke = Brushes.Orange,
                Fill = Brushes.Blue,
                StrokeThickness = 4
            };

            if (end.X >= start.X)
            {
                // Defines the left part of the rectangle
                newRectangle.SetValue(Canvas.LeftProperty, start.X);
                newRectangle.Width = end.X - start.X;
            }
            else
            {
                newRectangle.SetValue(Canvas.LeftProperty, end.X);
                newRectangle.Width = start.X - end.X;
            }

            if (end.Y >= start.Y)
            {
                // Defines the top part of the rectangle
                newRectangle.SetValue(Canvas.TopProperty, start.Y - 50);
                newRectangle.Height = end.Y - start.Y;
            }
            else
            {
                newRectangle.SetValue(Canvas.TopProperty, end.Y - 50);
                newRectangle.Height = start.Y - end.Y;
            }

            MyCanvas.Children.Add(newRectangle);
        }
    }
}